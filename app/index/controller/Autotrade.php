<?php
namespace app\index\controller;

class Autotrade extends OrderBase
{

    protected $public_action = [
        'get_time_pin',
        'auto_trade_10',
        'auto_trade_30',
        'auto_trade_60',
        'auto_trade_180',
        'auto_trade_600',
        'auto_trade',
        'addTrade',
        'return_price_f',
        'auto_trade_test_nudb',
        'return_nudb',
        'return_f',
        'auto_trade_20',
        'return_price_f_test'
    ];

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
                                   // error_reporting(E_ERROR | E_WARNING | E_PARSE);
    }

    public function get_time_pin()
    {
        // 24小时 +1 时间内
        $time_1 = 70; // 0-1点
        $time_2 = 30;
        $time_3 = 10;
        $time_4 = 5;
        $time_5 = 5;
        $time_6 = 5;
        $time_7 = 5;
        $time_8 = 20;
        $time_9 = 50;
        $time_10 = 100;
        $time_11 = 100;
        $time_12 = 100;
        $time_13 = 90;
        $time_14 = 100;
        $time_15 = 100;
        $time_16 = 100;
        $time_17 = 100;
        $time_18 = 100;
        $time_19 = 90;
        $time_20 = 90;
        $time_21 = 90;
        $time_22 = 90;
        $time_23 = 90;
        $time_24 = 80; // 23-24点
        $get_time_pin = array(
            'time_1' => $time_1,
            'time_2' => $time_2,
            'time_3' => $time_3,
            'time_4' => $time_4,
            'time_5' => $time_5,
            'time_6' => $time_6,
            'time_7' => $time_7,
            'time_8' => $time_8,
            'time_9' => $time_9,
            'time_10' => $time_10,
            'time_11' => $time_11,
            'time_12' => $time_12,
            'time_13' => $time_13,
            'time_14' => $time_14,
            'time_15' => $time_15,
            'time_16' => $time_16,
            'time_17' => $time_17,
            'time_18' => $time_18,
            'time_19' => $time_19,
            'time_20' => $time_20,
            'time_21' => $time_21,
            'time_22' => $time_22,
            'time_23' => $time_23,
            'time_24' => $time_24
        );
        
        return $get_time_pin;
    }

    public function auto_trade_10()
    {
        // 查询这个时段的所有要执行的
        $where_coin['action_time'] = 10;
        $currency = db('Currency')->where($where_coin)->select();
        $this->auto_trade($currency);
    }

    public function auto_trade_30()
    {
        // 查询这个时段的所有要执行的
        $where_coin['action_time'] = 30;
        $currency = db('Currency')->where($where_coin)->select();
        $this->auto_trade($currency);
    }

    public function auto_trade_60()
    {
        // 查询这个时段的所有要执行的
        $where_coin['action_time'] = 60;
        $currency = db('Currency')->where($where_coin)->select();
        $this->auto_trade($currency);
    }

    public function auto_trade_180()
    {
        // 查询这个时段的所有要执行的
        $where_coin['action_time'] = 180;
        $currency = db('Currency')->where($where_coin)->select();
        $this->auto_trade($currency);
    }

    public function auto_trade_600()
    {
        // 查询这个时段的所有要执行的
        $where_coin['action_time'] = 600;
        $currency = db('Currency')->where($where_coin)->select();
        $this->auto_trade($currency);
    }
    
    // 添加数据
    public function auto_trade($currency)
    {   
        foreach ($currency as $value) {
            echo "<br>id:".$value["currency_id"]." name:".$value["currency_name"];
            // 判断是否开启进入
            if ($value['is_autotrade']) {
                // 是否在线的
                if (empty($value['is_lock'])) {
                    // 星期6
                    if (empty($value['trade_day6'])) {
                        // 星期天
                        if (empty($value['trade_day7'])) {
                            // 时间段
                            if (empty($value['is_time'])) {
                                // 赋值
                                $value['min_time'] = 0;
                                $value['max_time'] = 25;
                            }
                            $time_limit = date("H", time()) + 1;
                            if ($time_limit > $value['min_time'] && $time_limit < $value['max_time'] + 1) {
                                // 判断几率进入，频率百分比
                                $get_time_pin = $this->get_time_pin();
                                $time_name = 'time_' . $time_limit;
                                $in_times = rand(1, 99);
                                $can_time = ($value['max_times'] * $get_time_pin[$time_name]) / 100;
                                
                                if ($in_times < $can_time) {
                                    // 进入数据
                                    
                                    $trade_id = 5;
                                    if( $value['currency_id']== $trade_id) continue; // in case of same currency_id/trade_id
                                    
                                    // 自动获取最新买价
                                    $buy_record = $this->getOrdersByType_new($value['currency_id'], 'buy', 10, 'desc', $trade_id);
                                    
                                    $buy_price = empty($buy_record[0]['price']) ? 0 : $buy_record[0]['price'];
                                    
                                    // 自动获取最新卖价
                                    $sell_record2 = $this->getOrdersByType_new($value['currency_id'], 'sell', 10, 'asc', $trade_id);
                                    $sell_record = array_reverse($sell_record2);
                                    
                                    $sell_price = empty($sell_record[count($sell_record) - 1]['price']) ? 0 : $sell_record[count($sell_record) - 1]['price'];
                                    // 如果 买一价比卖一价大 调换位置
                                    if ($buy_price > $sell_price) {
                                        $swith = $sell_price;
                                        $sell_price = $buy_price;
                                        $buy_price = $swith;
                                    }
                                    // 获取价格，数量
                                    // 之前价格百分比
                                    // 获取上一刷单价格
                                    // $where_last_price['member_id']=1;
                                    $where_last_price['currency_id'] = $value['currency_id'];
                                    $where_last_price['currency_trade_id'] = $trade_id;
                                    $get_last_price = db('trade')->where($where_last_price)
                                        ->order('trade_id desc')
                                        ->find()['price'];

                                    // 之间差价
                                    $in_price = $sell_price - $buy_price;
                                    // 最后价变换成直接价
                                    if ($get_last_price <= $buy_price) {
                                        $get_last_price = $buy_price;
                                    }
                                    if ($get_last_price >= $sell_price) {
                                        $get_last_price = $sell_price;
                                    }
                                    
                                    // var_dump($get_last_price);
                                    if (empty($get_last_price)) {
                                        $get_price = $sell_price; // $this->return_price_f($value['price_to_int'],$value['bs_price_num'], $value['bs_or'], $buy_price, $sell_price, $value['price_auto_1'], $value['price_auto_2'], $value['price_auto_3'], $value['price_auto_1'], $value['price_auto_4'], $value['price_auto_5'], $value['price_auto_6'], $value['price_auto_7'], $value['price_auto_8']);
                                    } else {
                                        // 获取上一个价格来变换价格，
                                        $rand_up_down = rand(1, 2);
                                        if ($get_last_price == $buy_price || $get_last_price < $buy_price) {
                                            $get_last_price = $buy_price;
                                            $rand_up_down = 1;
                                        }
                                        if ($get_last_price == $sell_price || $get_last_price > $sell_price) {
                                            $get_last_price = $sell_price;
                                            $rand_up_down = 2;
                                        }
                                        
                                        // 随机数产生
                                        $ran_num = rand(1, 100);
                                        $cha_price = $get_last_price - $buy_price;
                                        $in_bili = ($cha_price / $in_price) * 100;
                                        if ($in_bili < $ran_num) {
                                            $rand_up_down = 1;
                                        } else {
                                            $rand_up_down = 2;
                                        }
                                        if ($rand_up_down == 1) {
                                            // 上涨10%
                                            $rand_s = rand(1, 2);
                                            $get_price = randomFloat($get_last_price, $get_last_price + ($in_price / 30) * $rand_s);
                                        } else {
                                            // 下跌10%
                                            $rand_b = rand(1, 2);
                                            $get_price = randomFloat($get_last_price - ($in_price / 30) * $rand_b, $get_last_price);
                                        }
                                        $get_price = format_price($get_price);
                                    }
                                    
                                    // var_dump($buy_price);var_dump($sell_price);var_dump($rand_up_down);var_dump($in_bili);var_dump($ran_num);var_dump($get_last_price);var_dump($in_price);var_dump($get_price);exit();
                                    if ($get_price < $buy_price) {
                                        $get_price = $buy_price;
                                    }
                                    if ($get_price > $sell_price) {
                                        $get_price = $sell_price;
                                    }
                                    // 10分之一置换买卖价
                                    $ran_zhi = rand(1, 200);
                                    if (2 > $ran_zhi) {
                                        // 买卖互换
                                        $rand_b_s = rand(1, 2);
                                        if ($rand_b_s == 1) {
                                            $get_price = $buy_price;
                                        } else {
                                            $get_price = $sell_price;
                                        }
                                    } else {}
                                    
                                    echo " num:".$value['num_to_int']." f_1". $value['num_auto_f_1']." f_2".$value['num_auto_f_2']." f_3".$value['num_auto_f_3'].
                                    " f_4".$value['num_auto_f_4']." f_5".$value['num_auto_f_5']." l:".$value['num_auto_1']." 2:".$value['num_auto_2'].
                                    " 3:".$value['num_auto_3']." 4:".$value['num_auto_4']." 5:".$value['num_auto_5']." 6:".$value['num_auto_6'].
                                    " 7:".$value['num_auto_7']." 8:".$value['num_auto_8']." 9:".$value['num_auto_9'];
                                    $get_num = $this->return_nudb($value['num_to_int'], $value['num_auto_f_1'], $value['num_auto_f_2'], $value['num_auto_f_3'], $value['num_auto_f_4'], $value['num_auto_f_5'], $value['num_auto_1'], $value['num_auto_2'], $value['num_auto_3'], $value['num_auto_4'], $value['num_auto_5'], $value['num_auto_6'], $value['num_auto_7'], $value['num_auto_8'], $value['num_auto_9']);
                                    echo " r:".$get_num;
                                    // 有数据插入表
                                    if ($get_price > 0 && $get_num > 0) {
                                        // 随机买卖类型
                                        $rand_buy_sell_record = rand(1, 99);
                                        if ($rand_buy_sell_record < $value['buy_sell_record']) {
                                            $rand_type = 'buy';
                                        } else {
                                            $rand_type = 'sell';
                                        }
                                        // 修正买卖
                                        if ($get_price == $sell_price) {
                                            $rand_type = 'sell';
                                        }
                                        if ($get_price == $buy_price) {
                                            $rand_type = 'buy';
                                        }
                                        if (empty($value['order_in_time'])) {
                                            $value['order_in_time'] = 10;
                                        }
                                        if ($value['rand_order_in_time']) {
                                            $value['order_in_time'] = rand($value['order_in_time'], $value['rand_order_in_time']);
                                        }
                                        // 添加order表
                                        $order_data['member_id'] = 1;
                                        $order_data['type'] = $rand_type;
                                        $order_data['currency_id'] = $value['currency_id'];
                                        $order_data['currency_trade_id'] = $trade_id;
                                        $order_data['price'] = $get_price;
                                        $order_data['num'] = $get_num;
                                        $order_data['trade_num'] = 0;
                                        $order_data['status'] = 5;
                                        $order_data['trade_time'] = time() + $value['order_in_time'];
                                        $order_data['add_time'] = time();
                                        $order_data['in_time'] = time() + $value['order_in_time'];
                                        $order = db('Orders')->insertGetId($order_data);
                                        echo " insert Orders";
                                        if ($order) {
                                            // 是否添加trade记录
                                            if ($value['trade_log']) {
                                                // 写入成交表
                                                $r[] = $this->addTrade(1, $value['currency_id'], $trade_id, $get_price, $get_num, 'buy', 0, $order);
                                                echo " insert Trade, ok";
                                                // $r[]=$this->addTrade($trade_order['member_id'], $trade_order['currency_id'], $trade_order['currency_trade_id'], $trade_price, $trade_num, $trade_order['type'],$trade_order['fee']);
                                                // var_dump($r) ;die("end");
                                            }
                                        }
                                    }else{
                                        echo " Fail: get_price:".$get_price." get_num:".$get_num;
                                    }
                                }
                            }else{
                                echo "<br>time_limit:$time_limit  min:".$value['min_time']." max:".($value['max_time']+1);
                            }
                        }else{
                            echo "<br>trade_day7";
                        }
                    }else{
                        echo "<br>trade_day6";
                    }
                }else{
                    echo "<br>is_lock";
                }
            }else{
                echo "<br>is_autotrade is close";
            }
        }
    }
    // 添加交易数据
    private function addTrade($member_id, $currency_id, $currency_trade_id, $price, $num, $type, $fee, $order_id)
    {
        $fee = $price * $num * $fee;
        $data = array(
            'member_id' => $member_id,
            'currency_id' => $currency_id,
            'currency_trade_id' => $currency_trade_id,
            'price' => $price,
            'num' => $num,
            'fee' => $fee,
            'money' => $price * $num,
            'type' => $type,
            'orders_id' => $order_id,
            'status' => 5,
            'trade_no' => 'T' . time(),
            'add_time' => time()
        );
        
        if (db('Trade')->insert($data)) {
            return true;
        } else {
            return false;
        }
    }
    
    // 返回价格
    public function return_price_f($price_to_int, $bs_price_num, $bs_or, $buy_price, $sell_price, $a1, $a2, $a3, $a4, $a5, $a6, $a7, $a8)
    {
        // 化整几率,买卖原几率，买的几率，买价格，卖价格 价格段位 01234,a6-a8为百位以上
        
        // 选择买卖价格几率
        $rand_bs_price = rand(1, 99);
        if ($rand_bs_price < $bs_price_num) {
            $rand_buy_sell = rand(1, 99);
            
            if ($rand_buy_sell < $bs_or) {
                $rand_price = $sell_price;
            } else {
                $rand_price = $buy_price;
            }
        } else {
            // 获得阶段
            $cha_price = $sell_price - $buy_price;
            $duan = 0;
            for ($i = 1; $i < 10; $i += 1) {
                $row0 = pow(10, $i);
                $f = 0.0001 * $row0;
                if ($cha_price > $f) {
                    $duan = 1 + $duan;
                }
            }
            $duan = $duan + 2;
            
            // $a5=50; //10
            // $a6=50; //100
            // $a7=0; //1000
            // $a8=0; //10000
            $b = array(
                'a1' => $a1,
                'a2' => $a2,
                'a3' => $a3,
                'a4' => $a4,
                'a5' => $a5,
                'a6' => $a6,
                'a7' => $a7,
                'a8' => $a8
            );
            $number = rand(1, 999);
            
            $c = 0;
            for ($i = 1; $i < $duan; $i += 1) {
                $z = 'a' . $i;
                $d = $b[$z];
                $c = $c + $d;
                // 随机进入各段
                if ($number < $c) {
                    // 判断
                    $wei = 5 - $i;
                    if ($i < 2) {
                        
                        $rand_price = round(randomFloat($buy_price, $sell_price), $wei);
                        break;
                    } else 
                        if ($i < 6) {
                            $row0 = pow(10, $i);
                            $f = 0.00001 * $row0;
                            $buy_price_c = $buy_price + $f;
                            $sell_price_c = $sell_price - $f;
                            $rand_price = round(randomFloat($buy_price_c, $sell_price_c), $wei);
                            break;
                        } else {
                            
                            // 6开始 10以上开始
                            $z_wei = $i - 5;
                            $have_f_z = rand(1, 99);
                            // $price_null_z=90;
                            if ($have_f_z < $price_to_int) {
                                // 化整
                                if ($z_wei > 0) {
                                    // 2 进来为100
                                    $mo = rand(1, $z_wei);
                                    
                                    $mo_row_num = pow(10, $mo);
                                    $buy_price_c = $mo_row_num + $buy_price;
                                    $sell_price_c = $sell_price - $mo_row_num;
                                    $rand_price_c = rand($buy_price_c, $sell_price_c);
                                    $rand_price = $rand_price_c - $rand_price_c % $mo_row_num;
                                }
                            } else {
                                $rand_price = rand($buy_price, $sell_price);
                            }
                            break;
                        }
                }
            }
            if (empty($rand_price)) {
                $rand_buy_sell = rand(1, 99);
                if ($rand_buy_sell < $bs_or) {
                    $rand_price = $buy_price;
                } else {
                    $rand_price = $sell_price;
                }
            }
            if ($rand_price < $buy_price) {
                $rand_price = $buy_price;
            }
            if ($rand_price > $sell_price) {
                $rand_price = $sell_price;
            }
        }
        
        return $rand_price;
    }

    public function auto_trade_test_nudb()
    {
        // 1000
        // 数量随机
        $a1 = 80;
        $a2 = 0;
        $a3 = 500;
        $a4 = 200;
        $a5 = 200;
        $a6 = 0;
        $a7 = 20;
        $b = array(
            a1 => 300,
            a2 => 500,
            a3 => 200,
            a4 => 100,
            a5 => 200,
            a6 => 100,
            a7 => 100,
            a8 => 100,
            a9 => 100
        );
        $number = rand(1, 999);
        // echo $number;
        $number = 900;
        $c = 0;
        // $i比数组大1;5为中间开始，a5为1-10
        for ($i = 1; $i < 10; $i += 1) {
            $z = 'a' . $i;
            $d = $b[$z];
            $c = $c + $d;
            // 随机进入各段
            if ($number < $c) {
                // 判断小数，拼接，最小0.0001开始
                if ($i < 5) {
                    // $xiaoshu=rand(1, 9999);
                    
                    $wei = 5 - $i;
                    // $f=round($get_g,$wei);
                    $row0 = pow(10, $i);
                    $get_g = $row0 * 0.00001;
                    $get_g2 = $row0 * 0.0001;
                    // randomFloat
                    // 修正四拾伍入
                    
                    $rand_wei = rand($wei, 4);
                    $f = round(randomFloat($get_g, $get_g2), $rand_wei);
                    
                    break;
                } else {
                    // 整数以上，整数小数拼接
                    // 小数的几率
                    $have_f = rand(1, 99);
                    // 整数几率，0的参数
                    $num_null = 90;
                    $z_wei = $i - 4;
                    if ($have_f < $num_null) {
                        // 没小数
                        $row_num = pow(10, $z_wei);
                        $num_min = (1 * $row_num) / 10;
                        $num_max = (10 * $row_num) / 10 - 1;
                        $f = rand($num_min, $num_max);
                        // 化整几率
                        $have_f_z = rand(1, 99);
                        
                        $num_null_z = 60;
                        if ($have_f_z < $num_null_z) {
                            if ($z_wei > 2) {
                                $mo = rand(1, $z_wei);
                                if ($mo > 1) {
                                    $mo = $mo - 1;
                                }
                                $mo_row_num = pow(10, $mo);
                            }
                            $f = $f - $f % $mo_row_num;
                        }
                        
                        break;
                    } else {
                        // 拥有小数，不化整
                        // 整数
                        $row_num = pow(10, $z_wei);
                        $num_min = (1 * $row_num) / 10;
                        $num_max = (10 * $row_num) / 10 - 1;
                        $f = rand($num_min, $num_max);
                        // 小数
                        $m1 = 10;
                        $m2 = 10;
                        $m3 = 10;
                        $m4 = 10;
                        $xiaoshu = $this->return_f($num_null, $m1, $m2, $m3, $m4);
                        $f = $f + $xiaoshu;
                        break;
                    }
                }
            }
        }
        echo $f;
    }
    
    // 返回随机数量
    public function return_nudb($num_to_int, $m1, $m2, $m3, $m4, $m5, $a1, $a2, $a3, $a4, $a5, $a6, $a7, $a8, $a9)
    {
        // 参数化整$num_to_int,小数12340，数端123456789
        $b = array(
            'a1' => $a1,
            'a2' => $a2,
            'a3' => $a3,
            'a4' => $a4,
            'a5' => $a5,
            'a6' => $a6,
            'a7' => $a7,
            'a8' => $a8,
            'a9' => $a9
        );
        $number = rand(1, 999);
        
        $f = 0;
        $c = 0;
        // $i比数组大1;5为中间开始，a5为1-10
        for ($i = 1; $i < 10; $i += 1) {
            $z = 'a' . $i;
            $d = $b[$z];
            $c = $c + $d;
            // 随机进入各段
            if ($number < $c) {
                // 判断小数，拼接，最小0.0001开始
                if ($i < 5) {
                    $wei = 5 - $i;
                    
                    $row0 = pow(10, $i);
                    $get_g = $row0 * 0.00001;
                    $get_g2 = $row0 * 0.0001;
                    
                    // 修正四拾伍入
                    
                    $rand_wei = rand($wei, 4);
                    $f = round(randomFloat($get_g, $get_g2), $rand_wei);
                    break;
                } else {
                    // 整数以上，整数小数拼接
                    // 小数的几率
                    $have_f = rand(1, 99);
                    // 整数几率，0的参数
                    // $num_null=90;
                    $z_wei = $i - 4;
                    if ($have_f < $m5) {
                        // 没小数
                        $row_num = pow(10, $z_wei);
                        $num_min = (1 * $row_num) / 10;
                        $num_max = (10 * $row_num) / 10 - 1;
                        $f = rand($num_min, $num_max);
                        // 化整几率
                        $have_f_z = rand(1, 99);
                        if ($have_f_z < $num_to_int) {
                            $aa = 0;
                            if ($z_wei > 2) {
                                $mo = rand(1, $z_wei);
                                if ($mo > 1) {
                                    $mo = $mo - 1;
                                }
                                $mo_row_num = pow(10, $mo);
                                $aa = $f % $mo_row_num;
                            }
                            
                            $f = $f - $aa;
                        }
                        break;
                    } else {
                        // 拥有小数，不化整
                        // 整数
                        $row_num = pow(10, $z_wei);
                        $num_min = (1 * $row_num) / 10;
                        $num_max = (10 * $row_num) / 10 - 1;
                        $f = rand($num_min, $num_max);
                        // 小数
                        
                        $xiaoshu = $this->return_f($num_to_int, $m1, $m2, $m3, $m4);
                        $f = $f + $xiaoshu;
                        break;
                    }
                }
            }
        }
        return $f;
    }
    
    // 返回小数
    public function return_f($not0, $a1, $a2, $a3, $a4)
    {
        $jian = 99 - $not0;
        $b = array(
            'a1' => $a1,
            'a2' => $a2,
            'a3' => $a3,
            'a4' => $a4
        );
        $number = rand(1, $jian);
        // echo $number;
        $c = 0;
        $f = 0;
        // $i比数组大1
        for ($i = 1; $i < 5; $i += 1) {
            $z = 'a' . $i;
            $d = $b[$z];
            $c = $c + $d;
            // 随机进入各段
            if ($number < $c) {
                // 判断小数，拼接，最小0.0001开始
                if ($i < 5) {
                    $wei = 5 - $i;
                    
                    $row0 = pow(10, $i);
                    $get_g = $row0 * 0.00001;
                    $get_g2 = $row0 * 0.0001;
                    // randomFloat
                    // 修正四拾伍入
                    
                    $rand_wei = rand($wei, 4);
                    $f = round(randomFloat($get_g, $get_g2), $rand_wei);
                    break;
                }
            }
        }
        return $f;
    }

    public function auto_trade_20()
    {
        // $xiaoshu=rand(1, 9999);
        // $i=2;
        
        // $get_g= $xiaoshu*0.0001;
        // $get_g=0.0003;
        // $wei=5-$i;
        
        // $f=round($get_g,$wei);
        // if($f==0){
        // $row0=pow(10,$wei);
        // $f=0.0001*$row0;
        
        // }
        // $f=$this->return_f(30, 10, 30, 10,20);
        // $f1=rand(1000, 5000);
        
        // $f=$f1%100;
        // echo $f1.'_';
        // echo $f;
        // $f=72100;
        // // $z_wei=2;
        // // $mo=rand(1, $z_wei);
        // $mo_row_num=pow(10,5);
        
        // $f1=$f-$f%$mo_row_num;
        
        // echo $f1.'_'.$f;
        // $cha_price=$sell_price-$buy_price;
        
        // 获得阶段
        $buy_price = 6000.22;
        $sell_price = 6050.28;
        $cha_price = $sell_price - $buy_price;
        for ($i = 1; $i < 10; $i += 1) {
            $row0 = pow(10, $i);
            $f = 0.0001 * $row0;
            if ($cha_price > $f) {
                $duan = 1 + $duan;
            }
        }
        $duan = $duan + 1;
        
        // 0.01 3
        $a1 = 0;
        $a2 = 0;
        $a3 = 0;
        $a4 = 0;
        $a5 = 50; // 10
        $a6 = 50; // 100
        $a7 = 0; // 1000
        $a8 = 0; // 10000
        $b = array(
            'a1' => $a1,
            'a2' => $a2,
            'a3' => $a3,
            'a4' => $a4,
            'a5' => $a5,
            'a6' => $a6,
            'a7' => $a7,
            'a8' => $a8
        );
        $number = rand(1, 99);
        // echo $number;
        $c = 0;
        for ($i = 1; $i < $duan; $i += 1) {
            $z = 'a' . $i;
            $d = $b[$z];
            $c = $c + $d;
            // 随机进入各段
            if ($number < $c) {
                // 判断
                $wei = 5 - $i;
                if ($i < 2) {
                    
                    $rand_price = round(randomFloat($buy_price, $sell_price), $wei);
                    break;
                } else 
                    if ($i < 6) {
                        $row0 = pow(10, $i);
                        $f = 0.00001 * $row0;
                        $buy_price = $buy_price + $f;
                        $sell_price = $sell_price - $f;
                        $rand_price = round(randomFloat($buy_price, $sell_price), $wei);
                        break;
                    } else {
                        
                        // 6开始 10以上开始
                        $z_wei = $i - 5;
                        $have_f_z = rand(1, 99);
                        $price_null_z = 90;
                        if ($have_f_z < $price_null_z) {
                            // 化整
                            if ($z_wei > 0) {
                                // 2 进来为100
                                $mo = rand(1, $z_wei);
                                
                                $mo_row_num = pow(10, $mo);
                                $buy_price = $mo_row_num + $buy_price;
                                $sell_price = $sell_price - $mo_row_num;
                                $rand_price = rand($buy_price, $sell_price);
                                $rand_price = $rand_price - $rand_price % $mo_row_num;
                            }
                        } else {
                            $rand_price = rand($buy_price, $sell_price);
                        }
                        break;
                    }
            }
            // break;
        }
        // $rand_price= round(randomFloat($buy_price, $sell_price),0);
        $time_1 = date("H", 1518451466);
        $aa = $this->get_time_pin();
        $value['min_time'] = 1;
        $value['max_time'] = 18;
        $time_limit = $time_1;
        if ($time_limit > $value['min_time'] && $time_limit < $value['max_time']) {}
        $a = (80 * $aa['time_5']) / 100;
        // echo $buy_price.'——'.$sell_price.'——'.$duan.'——'.$rand_price.'_'.$time_1.'_'.$a;
        // var_dump($aa);
        $a = round(randomFloat(0.001, 0.01), 2);
        
        $a = $this->return_price_f(100, 10, 50, 68000, 70000, 0, 0, 0, 0, 0, 0, 100, 900);
        // echo $a;
        $where_coin['action_time'] = 180;
        $currency = db('Currency')->where($where_coin)->select();
        // var_dump($currency);
    }

    public function return_price_f_test($price_to_int, $bs_price_num, $bs_or, $buy_price, $sell_price, $a1, $a2, $a3, $a4, $a5, $a6, $a7, $a8)
    {
        // 化整几率,买卖原几率，买的几率，买价格，卖价格 价格段位 01234,a6-a8为百位以上
        
        // 选择买卖价格几率
        $rand_bs_price = rand(1, 99);
        if ($rand_bs_price < $bs_price_num) {
            $rand_buy_sell = rand(1, 99);
            
            if ($rand_buy_sell < $bs_or) {
                $rand_price = $sell_price;
            } else {
                $rand_price = $buy_price;
            }
        } else {
            
            // 获得阶段
            $cha_price = $sell_price - $buy_price;
            for ($i = 1; $i < 10; $i += 1) {
                $row0 = pow(10, $i);
                $f = 0.0001 * $row0;
                if ($cha_price > $f) {
                    $duan = 1 + $duan;
                }
            }
            $duan = $duan + 2;
            
            // $a5=50; //10
            // $a6=50; //100
            // $a7=0; //1000
            // $a8=0; //10000
            $b = array(
                'a1' => $a1,
                'a2' => $a2,
                'a3' => $a3,
                'a4' => $a4,
                'a5' => $a5,
                'a6' => $a6,
                'a7' => $a7,
                'a8' => $a8
            );
            $number = rand(1, 999);
            
            $c = 0;
            for ($i = 1; $i < $duan; $i += 1) {
                
                $z = 'a' . $i;
                $d = $b[$z];
                $c = $c + $d;
                
                // 随机进入各段
                if ($number < $c) {
                    
                    // 判断
                    $wei = 5 - $i;
                    // var_dump($wei);
                    if ($i < 2 && $i > 0) {
                        var_dump(1);
                        $rand_price = round(randomFloat($buy_price, $sell_price), $wei);
                        
                        break;
                    } else 
                        if ($i < 6 && $i > 0) {
                            $row0 = pow(10, $i);
                            $f = 0.00001 * $row0;
                            $buy_price_c = $buy_price + $f;
                            $sell_price_c = $sell_price - $f;
                            $rand_price = round(randomFloat($buy_price_c, $sell_price_c), $wei);
                            var_dump(2);
                            break;
                        } else {
                            
                            // 6开始 10以上开始
                            $z_wei = $i - 5;
                            var_dump($z_wei);
                            $have_f_z = rand(1, 99);
                            // $price_null_z=90;
                            if ($have_f_z < $price_to_int) {
                                
                                // 化整
                                if ($z_wei > 0) {
                                    var_dump(2);
                                    // 2 进来为100
                                    $mo = rand(1, $z_wei);
                                    
                                    $mo_row_num = pow(10, $mo);
                                    var_dump($mo_row_num);
                                    $buy_price_c = $mo_row_num + $buy_price;
                                    $sell_price_c = $sell_price - $mo_row_num;
                                    $rand_price_c = rand($buy_price_c, $sell_price_c);
                                    $rand_price = $rand_price_c - $rand_price_c % $mo_row_num;
                                }
                                var_dump(5);
                                var_dump($rand_price);
                            } else {
                                $rand_price = rand($buy_price, $sell_price);
                                var_dump(8);
                            }
                            var_dump(9);
                            var_dump($rand_price);
                            exit();
                            break;
                        }
                }
            }
            var_dump(7);
            var_dump($rand_price);
            exit();
            if ($rand_price < $buy_price) {
                $rand_price = $buy_price;
            }
            if ($rand_price > $sell_price) {
                $rand_price = $sell_price;
            }
            if (empty($rand_price)) {
                $rand_buy_sell = rand(1, 99);
                if ($rand_buy_sell < $bs_or) {
                    $rand_price = $buy_price;
                } else {
                    $rand_price = $sell_price;
                }
            }
        }
        
        return $rand_price;
    }
}

