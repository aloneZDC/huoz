<?php

namespace app\backend\controller;

use app\common\model\Sender;
use think\captcha\Captcha;
use think\Controller;
use think\Db;
use think\Request;
use think\Validate;

class Open extends Controller
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
//        AdminLog::add_log(session('admin_id'),$this->request->controller(),$this->request->action(),input('param',''),input(''));

        //保存日志和过滤一些密码或上传图片数据
        if (strtolower($this->request->controller()) == 'index') {
            $data = [];
        } else {
            $data = input();
            $filter_param = ['pic1', 'pic2', 'pic3', 'img', 'image'];
            foreach ($filter_param as $filter) {
                if (isset($data[$filter])) $data[$filter] = '';
            }
            if (isset($data["/" . $this->request->pathinfo()])) {
                unset($data["/" . $this->request->pathinfo()]);
            }
            if (isset($data['pwd'])) {
                unset($data['pwd']);
            }
            if (isset($data['password'])) {
                unset($data['password']);
            }
        }

        $ip = get_client_ip();
        Db::name('backend_access_log')->insertGetId([
            'admin_id' => intval(session('admin_id')),
            'module' => $this->request->pathinfo(),
            'param' => json_encode($data),
            'access_ip' => $ip,
            'access_time' => time(),
        ]);
    }

    /**
     * 登录页面
     * @return mixed
     */
    public function login()
    {
        $email_sender =  input('email_sender','');
        $mark = input('mark','');
        $this->assign(['email_sender'=>$email_sender,'mark'=>$mark]);
        return $this->fetch();
    }

    /**
     * 处理登录
     * @param Request $request
     * @return \think\response\Json|\think\response\Redirect
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function doLogin(Request $request)
    {
        // 处理登录
        $data = $request->post();
        $validate = new Validate([
            'username' => 'require',
            'password' => 'require|min:6',
        ],[
            'username.require' => '用户名不能为空',
            'password.require' => '密码不能为空',
            'password.min' => '密码填写错误',
        ]);
        if (!$validate->check($data)) {
            return successJson(ERROR1,$validate->getError());
        }

        // 验证码密码
        $user = \app\backend\model\BackendUsers::getUserWithLogin($data['username'], $data['password']);
        if (empty($user)) {
            return successJson(ERROR1,"用户名密码不匹配");
        }

        if ($user->status != 1) {
            return successJson(ERROR1,"账号状态异常, 禁止登陆!");
        }

        //如果配置了邮箱验证
        $email_code = input('email_code');
        $isSender = intval(input('sender'));
        if(empty($email_code)) {
            if($isSender) {
                $sender = (new Sender())->send_email($user['email'],'BackendLogin');
                if(is_string($sender)) {
                    return successJson(ERROR1,"验证码发送失败：".$sender);
                }
            }
            return successJson(SUCCESS,"验证码发送成功");
        } else {
            if(empty($email_code)) {
                return successJson(ERROR1,"验证码填写错误");
            }

            $sender = (new Sender())->check_log(2,$user['email'],'BackendLogin',$email_code,true);
            if(is_string($sender)) {
                return successJson(ERROR1,"验证码填写错误,请重新发送,".$sender);
            }
        }

        session('admin_id', $user->id);
        \app\backend\model\BackendUsers::updateLoginInfo($user->id, time(), get_client_ip());
        return successJson(SUCCESS,"登录成功");
    }

    /**
     * 退出登录
     * @return \think\response\Redirect
     */
    public function logout()
    {
        session('admin_id', null);
        return redirect(url('login'));
    }

    /**
     * 验证码
     * @return \think\Response
     */
    public function captcha()
    {
        $config =  [
            'fontSize' => 13,              // 验证码字体大小(px)
            'useCurve' => true,            // 是否画混淆曲线
            'useNoise' => false,            // 是否添加杂点
            'imageH' => 35,               // 验证码图片高度
            'imageW' => 80,               // 验证码图片宽度
            'length' => 3,               // 验证码位数
            'fontttf' => '4.ttf',              // 验证码字体，不设置随机获取
        ];
        return (new Captcha($config))->entry();
    }

    /**
     * 验证码
     * @param string $captcha 验证码
     * @return bool
     */
    public static function verifyCaptcha($captcha = '')
    {
        if ((new Captcha())->check($captcha)) {
            return true;
        }

        return false;
    }
}
